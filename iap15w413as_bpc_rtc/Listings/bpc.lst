C51 COMPILER V9.60.0.0   BPC                                                               07/05/2019 17:37:14 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE BPC
OBJECT MODULE PLACED IN .\Objects\bpc.obj
COMPILER INVOKED BY: C:\Root\Opt\Keil\C51\BIN\C51.EXE bpc.c LARGE OPTIMIZE(7,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Li
                    -stings\bpc.lst) OBJECT(.\Objects\bpc.obj)

line level    source

   1          
   2          #include "iap15w413as.h"
   3          
   4          sbit bpc_go = P3^5;
   5          sbit bpc_pin = P3^4;
   6          
   7          void bpc_config(void)
   8          {
   9   1              bpc_pin = LOWER;
  10   1              PINMxSET(P3M1, 4);
  11   1              PINMxCLS(P3M0, 4);
  12   1              
  13   1              bpc_disable();
  14   1      }
  15          
  16          void bpc_enable(void)
  17          {
  18   1              bpc_go = 0;
  19   1      }
  20          
  21          void bpc_disable(void)
  22          {
  23   1              bpc_go = 1;
  24   1      }
  25          
  26          static int bpc_sync(void)
  27          {
  28   1              int err = 0;
  29   1              
  30   1              while (bpc_pin != HIGH) {
  31   2                      delay_ms(10);
  32   2              if (err >= 200) return ERR;   // 2秒内没收到高平脉冲,返回错误.
  33   2              err++;
  34   2              }
  35   1              
  36   1              err = 0;
  37   1          while (bpc_pin != LOWER) {
  38   2              delay_ms(10);
  39   2              if (err >= 100) return ERR;   // 2秒内没收到低平脉冲,返回错误.
  40   2              err++;
  41   2          }
  42   1      
  43   1          return OK;
  44   1      }
  45          
  46          static int bpc_sec(void)
  47          {
  48   1          u16 H = 0;
  49   1          u16 L = 0;
  50   1          u16 T;
  51   1          u8 i = 0;
  52   1      
  53   1          while (i < 100) {
  54   2              if (bpc_flag == 1) {
C51 COMPILER V9.60.0.0   BPC                                                               07/05/2019 17:37:14 PAGE 2   

  55   3                  T = bpc_pin;
  56   3                  if (T) {
  57   4                                      H++; 
  58   4                                      led_color_enable();
  59   4                              } else {
  60   4                                      L++; 
  61   4                                      led_color_disable();
  62   4                              }
  63   3      
  64   3                  i++;
  65   3                  bpc_flag = 0;
  66   3              }
  67   2          }
  68   1      #ifdef IAP15W413AS_TEST
  69   1              send_u8_decimal(L);
  70   1              send_string("0  \t\t");
  71   1      #endif
  72   1          if (L >= 85 && L < 95) return '0';          // 100ms
  73   1          if (L >= 75 && L < 85) return '1';          // 200ms
  74   1          if (L >= 65 && L < 75) return '2';          // 300ms
  75   1              if (L >= 55 && L < 65) return '3';              // 400ms
  76   1              if (L >= 95) return 'P';                // 1000ms
  77   1      
  78   1          return ERR;
  79   1      }
  80          
  81          static int to_coding(int ch)
  82          {
  83   1      #ifdef IAP15W413AS_TEST
  84   1              send_data(ch);
  85   1          send_string("  \r\n");
  86   1      #endif
  87   1          if (ch == '0') return 0;
  88   1          if (ch == '1') return 1;
  89   1              if (ch == '2') return 2;
  90   1              if (ch == '3') return 3;
  91   1          if (ch == 'P') return 4;
  92   1      
  93   1          return ERR;
  94   1      }
  95          
  96          static int bpc_check(u8 *bpcarray)
  97          {
  98   1          u8 val;
  99   1          u8 bits = 0;
 100   1          int i, j;
 101   1      
 102   1          for (i = 1; i < 10; i++) {
 103   2              val = bpcarray[i];
 104   2              for (j = 0; j < 8; j++) {
 105   3                  if ((val >> j) & 0x1 == 1) bits++;
 106   3              }
 107   2          }
 108   1      
 109   1          bits %= 2;
 110   1          if (bits != bpcarray[10] && bits+2 != bpcarray[10]) return ERR;
 111   1      
 112   1          bits = 0;
 113   1          for (i = 11; i < 19; i++) {
 114   2              val = bpcarray[i];
 115   2              for (j = 0; j < 8; j++) {
 116   3                  if ((val >> j) & 0x1 == 1) bits++;
C51 COMPILER V9.60.0.0   BPC                                                               07/05/2019 17:37:14 PAGE 3   

 117   3              }
 118   2          }
 119   1      
 120   1          bits %= 2;
 121   1          if (bits != bpcarray[19] && bits+2 != bpcarray[19]) return ERR;
 122   1      
 123   1          return OK;
 124   1      }
 125          
 126          static void bpc2time(u8 *bpcarray, Date *dat)
 127          {
 128   1          dat->sec = bpcarray[1] * 20;
 129   1          dat->min = (bpcarray[5] * 4 + bpcarray[6]) * 4 + bpcarray[7];
 130   1          dat->hour = bpcarray[3] * 4 + bpcarray[4];
 131   1      
 132   1          dat->week = bpcarray[8] * 4 + bpcarray[9];
 133   1          if (bpcarray[10] == 2 || bpcarray[10] == 3)
 134   1              if (dat->hour != 12)
 135   1                  dat->hour += 12;
 136   1      
 137   1          dat->day = (bpcarray[11] * 4 + bpcarray[12]) * 4 + bpcarray[13];
 138   1          dat->mon = bpcarray[14] * 4 + bpcarray[15];
 139   1          dat->year = (bpcarray[16] * 4 + bpcarray[17]) * 4 + bpcarray[18];
 140   1          if (bpcarray[19] == 2 || bpcarray[19] == 3)
 141   1              dat->year += 0x40;
 142   1              dat->year += 2000;
 143   1      }
 144          
 145          #define BPCSIZE         20
 146          int get_bpc(Date *dat)
 147          {
 148   1              u8 bpc_array[2][BPCSIZE] = {0};
 149   1              Date dat_array[2];
 150   1              int status;
 151   1              int coding;
 152   1              int i = 0;
 153   1              int k = 0;
 154   1              int j = 0;
 155   1              
 156   1              while (1) {
 157   2                      status = bpc_sync();
 158   2      #ifdef IAP15W413AS_TEST
 159   2              if (status == OK) send_string("Ok. \r\n");
 160   2                      else send_string("Err. \r\n");
 161   2      #endif
 162   2                      if (status != ERR) break;
 163   2                      if (i >= 5) return ERR;
 164   2                      i++;
 165   2              }
 166   1              
 167   1              while (1) {
 168   2                      if (k > BPCSIZE) return ERR;
 169   2                      coding = to_coding(bpc_sec());
 170   2                      if (coding == ERR) return ERR;
 171   2                      if (coding == 4) break;
 172   2                      k++;
 173   2              }
 174   1              
 175   1              for (j = 0; j < 2; j++) {
 176   2                      i = 0;
 177   2                      bpc_array[j][i] = 4;    // 'P'
 178   2                      i++;
C51 COMPILER V9.60.0.0   BPC                                                               07/05/2019 17:37:14 PAGE 4   

 179   2                      while (1) {
 180   3                              coding = to_coding(bpc_sec());
 181   3                              if (coding == ERR) return ERR;
 182   3                              if (coding == 4) {
 183   4                                      if (i == BPCSIZE) {
 184   5                                              if (bpc_check(&bpc_array[j][0]) == OK) break;
 185   5                                              else {send_string("check err. \r\n");return ERR;}
 186   5                                      }
 187   4                                      else return ERR;
 188   4                              }
 189   3                              
 190   3                              if (i >= BPCSIZE) return ERR;
 191   3                              bpc_array[j][i] = coding;
 192   3                              i++;
 193   3                      }
 194   2                      send_string("T. \r\n");
 195   2              }
 196   1              
 197   1              bpc2time(&bpc_array[0][0], &dat_array[0]);
 198   1          bpc2time(&bpc_array[1][0], &dat_array[1]);
 199   1              to_sec(&dat_array[0]); to_sec(&dat_array[1]);
 200   1              if ((dat_array[1].timestamp - dat_array[0].timestamp) == 20) {
 201   2                      *dat = dat_array[1];
 202   2                      dat->timestamp += 21;
 203   2                      to_date(dat);
 204   2                      to_week(dat);
 205   2                      return OK;
 206   2              } else return ERR;
 207   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2163    ----
   CONSTANT SIZE    =     86    ----
   XDATA SIZE       =   ----     113
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
